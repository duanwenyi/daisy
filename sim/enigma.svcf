# SimVision Command Script (Mon Oct 26 01:42:13 PM EDT 2015)
#
# Version 13.10.p001
#
# You can restore this configuration with:
#
#     simvision -input /home/apachee/github/daisy/sim/enigma.svcf
#


#
# Preferences
#
preferences set plugin-enable-svdatabrowser-new 1
preferences set plugin-enable-groupscope 0
preferences set plugin-enable-interleaveandcompare 0
preferences set whats-new-dont-show-at-startup 1

#
# Databases
#
database require waves -search {
	./waves.shm/waves.trn
	/home/apachee/github/daisy/sim/waves.shm/waves.trn
}

#
# Groups
#
catch {group new -name portA_in -overlay 0}
catch {group new -name {Group 2} -overlay 0}
catch {group new -name portB_in -overlay 0}
catch {group new -name portC_out -overlay 0}

group using portA_in
group set -overlay 0
group set -comment {}
group clear 0 end

group insert \
     {waves::TH.enigma_buffer.id_a[4:0]}  \
     {waves::TH.enigma_buffer.qos_a[1:0]}  \
     {waves::TH.enigma_buffer.payload_a[127:0]}  \
     waves::TH.enigma_buffer.portSel  \
     waves::TH.enigma_buffer.ready_a  \
     waves::TH.enigma_buffer.valid_a  \
     {((waves::TH.enigma_buffer.ready_a === 'b1) && (waves::TH.enigma_buffer.valid_a === 'b1))} 

group using {Group 2}
group set -overlay 0
group set -comment {}
group clear 0 end


group using portB_in
group set -overlay 0
group set -comment {}
group clear 0 end

group insert \
     {waves::TH.enigma_buffer.id_b[4:0]}  \
     {waves::TH.enigma_buffer.qos_b[1:0]}  \
     {waves::TH.enigma_buffer.payload_b[127:0]}  \
     waves::TH.enigma_buffer.ready_b  \
     waves::TH.enigma_buffer.valid_b  \
     {((waves::TH.enigma_buffer.ready_b === 'b1) && (waves::TH.enigma_buffer.valid_b === 'b1))} 

group using portC_out
group set -overlay 0
group set -comment {}
group clear 0 end

group insert \
     {waves::TH.enigma_buffer.id_c[5:0]}  \
     {waves::TH.enigma_buffer.qos_c[1:0]}  \
     {waves::TH.enigma_buffer.payload_c[127:0]}  \
     {waves::TH.enigma_buffer.max_qos[1:0]}  \
     waves::TH.enigma_buffer.dim_qos_en  \
     waves::TH.enigma_buffer.valid_c  \
     waves::TH.enigma_buffer.ready_c  \
     {((waves::TH.enigma_buffer.ready_c === 'b1) && (waves::TH.enigma_buffer.valid_c === 'b1))}  \
     waves::TH.enigma_buffer.pre_out_vld  \
     waves::TH.enigma_buffer.release_c  \
     waves::TH.enigma_buffer.conflict_c  \
     {waves::TH.enigma_buffer.tail_ptr[5:0]}  \
     {waves::TH.enigma_buffer.chain_size[6:0]}  \
     {waves::TH.enigma_buffer.chain_id[5:0]} 

#
# Mnemonic Maps
#
mmap new -reuse -name {Boolean as Logic} -radix %b -contents {{%c=FALSE -edgepriority 1 -shape low}
{%c=TRUE -edgepriority 1 -shape high}}
mmap new -reuse -name {Example Map} -radix %x -contents {{%b=11???? -bgcolor orange -label REG:%x -linecolor yellow -shape bus}
{%x=1F -bgcolor red -label ERROR -linecolor white -shape EVENT}
{%x=2C -bgcolor red -label ERROR -linecolor white -shape EVENT}
{%x=* -label %x -linecolor gray -shape bus}}

#
# Waveform windows
#
if {[catch {window new WaveWindow -name "Waveform 1" -geometry 1391x1001+494+0}] != ""} {
    window geometry "Waveform 1" 1391x1001+494+0
}
window target "Waveform 1" on
waveform using {Waveform 1}
waveform sidebar select designbrowser
waveform set \
    -primarycursor TimeA \
    -signalnames name \
    -signalwidth 175 \
    -units ns \
    -valuewidth 75
waveform baseline set -time 230,000ps

set id [waveform add -signals  {
	waves::TH.enigma_buffer.clk
	waves::TH.enigma_buffer.rst_n
	waves::TH.enigma_sim.rst_n
	waves::TH.enigma_sim.clk
	} ]

set groupId0 [waveform add -groups portC_out]
set gpGlist0 [waveform hierarchy contents $groupId0]
set gpID0 [lindex $gpGlist0 0]
foreach {name attrs}  {
    {waves::TH.enigma_buffer.id_c[5:0]} {-radix %x}
    {waves::TH.enigma_buffer.qos_c[1:0]} {-radix %x}
    {waves::TH.enigma_buffer.payload_c[127:0]} {-radix %x}
    {waves::TH.enigma_buffer.max_qos[1:0]} {-color #00ffff}
    waves::TH.enigma_buffer.dim_qos_en {-color #00ffff}
    waves::TH.enigma_buffer.valid_c {-color #ff9900 -namecolor #00ff00 -bgcolor #000000}
    waves::TH.enigma_buffer.ready_c {-color #ff9900 -namecolor #00ff00 -bgcolor #000000}
    {((waves::TH.enigma_buffer.ready_c === 'b1) && (waves::TH.enigma_buffer.valid_c === 'b1))} {-color #ff0099}
    waves::TH.enigma_buffer.pre_out_vld {-color #00ffff}
    waves::TH.enigma_buffer.release_c {}
    waves::TH.enigma_buffer.conflict_c {}
    {waves::TH.enigma_buffer.head_ptr[5:0]} {-color #00ffff}
    {waves::TH.enigma_buffer.tail_ptr[5:0]} {-color #00ffff -namecolor #ff00ff}
    {waves::TH.enigma_buffer.chain_size[6:0]} {-color #00ff99}
    {waves::TH.enigma_buffer.chain_id[5:0]} {-radix %x -color #00ffff}
} childcmds {
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
} {
    set expected [ join [waveform signals -format fullpath $gpID0] ]
    if {[string equal $name $expected] || $name == "cdivider"} {
        if {$attrs != ""} {
            eval waveform format $gpID0 $attrs
        }
        if { $childcmds != ""} {
            eval $childcmds
        }
    }
    set gpGlist0 [lrange $gpGlist0 1 end]
    set gpID0 [lindex $gpGlist0 0]
}

set id [waveform add -signals  {
	{waves::TH.enigma_buffer.last_chain_id[5:0]}
	} ]
set id [waveform add -signals  {
	{waves::TH.enigma_buffer.nptr[5:0]}
	} ]
waveform format $id -color #0099ff -namecolor #9900ff
set id [waveform add -signals  {
	{waves::TH.enigma_buffer.nnptr[5:0]}
	} ]
waveform format $id -color #0099ff -namecolor #9900ff

set groupId0 [waveform add -groups portA_in]
set gpGlist0 [waveform hierarchy contents $groupId0]
set gpID0 [lindex $gpGlist0 0]
foreach {name attrs}  {
    {waves::TH.enigma_buffer.id_a[4:0]} {}
    {waves::TH.enigma_buffer.qos_a[1:0]} {}
    {waves::TH.enigma_buffer.payload_a[127:0]} {}
    waves::TH.enigma_buffer.portSel {}
    waves::TH.enigma_buffer.ready_a {-color #0099ff -namecolor #00ff00}
    waves::TH.enigma_buffer.valid_a {-color #ff9900 -namecolor #00ff00}
    {((waves::TH.enigma_buffer.ready_a === 'b1) && (waves::TH.enigma_buffer.valid_a === 'b1))} {-color #ff00ff}
} childcmds {
    {}
    {}
    {}
    {}
    {}
    {}
    {}
} {
    set expected [ join [waveform signals -format fullpath $gpID0] ]
    if {[string equal $name $expected] || $name == "cdivider"} {
        if {$attrs != ""} {
            eval waveform format $gpID0 $attrs
        }
        if { $childcmds != ""} {
            eval $childcmds
        }
    }
    set gpGlist0 [lrange $gpGlist0 1 end]
    set gpID0 [lindex $gpGlist0 0]
}


set groupId0 [waveform add -groups portB_in]
set gpGlist0 [waveform hierarchy contents $groupId0]
set gpID0 [lindex $gpGlist0 0]
foreach {name attrs}  {
    {waves::TH.enigma_buffer.id_b[4:0]} {}
    {waves::TH.enigma_buffer.qos_b[1:0]} {}
    {waves::TH.enigma_buffer.payload_b[127:0]} {}
    waves::TH.enigma_buffer.ready_b {-color #0099ff -namecolor #99ff00}
    waves::TH.enigma_buffer.valid_b {-color #ff9900 -namecolor #99ff00}
    {((waves::TH.enigma_buffer.ready_b === 'b1) && (waves::TH.enigma_buffer.valid_b === 'b1))} {-color #ff00ff}
} childcmds {
    {}
    {}
    {}
    {}
    {}
    {}
} {
    set expected [ join [waveform signals -format fullpath $gpID0] ]
    if {[string equal $name $expected] || $name == "cdivider"} {
        if {$attrs != ""} {
            eval waveform format $gpID0 $attrs
        }
        if { $childcmds != ""} {
            eval $childcmds
        }
    }
    set gpGlist0 [lrange $gpGlist0 1 end]
    set gpID0 [lindex $gpGlist0 0]
}

set id [waveform add -signals  {
	{waves::TH.enigma_sim.tick[31:0]}
	} ]

waveform xview limits 216.46ns 243.54ns

#
# Waveform Window Links
#

